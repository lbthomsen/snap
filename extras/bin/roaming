#!/bin/bash
while [ ! -S /var/run/openvswitch/db.sock ]; do
    sleep 1
done

function renew_ips(){
    arr=("$@")

    #obtain IPs or renew lease for secondary interfaces
    timeout 10 dhclient ${arr[1]}
    timeout 10 dhclient ${arr[2]}

    #obtain IP or renew lease for primary interface
    timeout 15 dhclient ${arr[0]}

    #in case of error -> renew IP
    if [ "$?" != "0" ]; then
        dhclient -r ${arr[0]}
   	    /bin/ip addr flush dev ${arr[0]}
   	    timeout 15 dhclient ${arr[0]}
    else
        #check if default route is on primary interface, refresh otherwise
        if [ "$(ip route list exact 0/0 | grep -c ${arr[0]})" == "0" ]; then
            ip route del 0/0
            timeout 15 dhclient ${arr[0]}
        #check if default route works, refresh otherwise
        else
            ping -c1 -w3 8.8.8.8 &>/dev/null
            if [ "$?" != "0" ]; then
                ip route del 0/0
                timeout 15 dhclient ${arr[0]}
            fi
        fi
    fi

    #kill dhclient for this round
    pkill dhclient
}

function process(){
    #arrays for interface names
    ENP_IFACES=()
    ENS_IFACES=()
    ENO_IFACES=()
    ETH_IFACES=()

    #iterate over interface names
    for iface in `basename -a /sys/class/net/* | sort` ; do

      if [[ $iface == enp* ]] ;
      then
          ENP_IFACES+=($iface)
      fi
      if [[ $iface == ens* ]] ;
      then
          ENS_IFACES+=($iface)
      fi
      if [[ $iface == eno* ]] ;
      then
          ENO_IFACES+=($iface)
      fi
      if [[ $iface == eth* ]] ;
      then
          ETH_IFACES+=($iface)
      fi

    done

    #check/renew ips of 3 similar interfaces
    if [ ${#ENP_IFACES[@]} == 3 ] ;
    then
      renew_ips "${ENP_IFACES[@]}";
    elif [ ${#ENS_IFACES[@]} == 3 ] ;
    then
      renew_ips "${ENS_IFACES[@]}";
    elif [ ${#ENO_IFACES[@]} == 3 ] ;
    then
      renew_ips "${ENO_IFACES[@]}";
    elif [ ${#ETH_IFACES[@]} == 3 ] ;
    then
      renew_ips "${ETH_IFACES[@]}";
    fi

}


#check if we are in a virtual machine
if [ -n "$(grep ^flags.*\ hypervisor /proc/cpuinfo)" ]; then
	while true; do
        process;
        sleep 20
	done
fi
